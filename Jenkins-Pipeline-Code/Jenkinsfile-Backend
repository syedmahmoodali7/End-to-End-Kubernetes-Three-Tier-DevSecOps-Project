pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }
    stages {
        stage('Cleaning Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB-APP', url: 'https://github.com/syedmahmoodali7/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectName=three-tier-backend \
                          -Dsonar.projectKey=three-tier-backend
                        """
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        // stage('OWASP Dependency-Check Scan') {
        //     steps {
        //         dir('Application-Code/backend') {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Build & Push to ECR") {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                    script {
                        dir('Application-Code/backend') {
                            sh """
                              docker system prune -f
                              docker container prune -f
                              docker build -t ${env.AWS_ECR_REPO_NAME}:latest .
                              
                              # Login to ECR
                              aws ecr get-login-password --region ${env.AWS_DEFAULT_REGION} \
                                | docker login --username AWS --password-stdin ${env.REPOSITORY_URI}
                              
                              docker tag ${env.AWS_ECR_REPO_NAME}:latest ${env.REPOSITORY_URI}/${env.AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                              docker push ${env.REPOSITORY_URI}/${env.AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                script {
                    sh "trivy image ${env.REPOSITORY_URI}/${env.AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt"
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "syedmahmoodali7"
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh """
                          git config user.email "syedmahmoodali07@gmail.com"
                          git config user.name "syedmahmoodali7"

                          imageTag=\$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml || echo "none")
                          echo "Old image tag: \$imageTag"
                          echo "New image tag: ${BUILD_NUMBER}"

                          if [ "\$imageTag" != "none" ]; then
                              sed -i "s/${env.AWS_ECR_REPO_NAME}:\$imageTag/${env.AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                          fi

                          git add deployment.yaml
                          git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                          git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        """
                    }
                }
            }
        }
    }
}
